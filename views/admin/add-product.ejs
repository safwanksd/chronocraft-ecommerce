<!-- admin/add-product.ejs -->

<!DOCTYPE html>
<html lang="en">

<head>
    <title>Add Product</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@sweetalert2/theme-bootstrap-4/bootstrap-4.min.css">
    <link rel="stylesheet" href="/css/admin-style.css">

    <style>
        .drag-drop-area {
            border: 2px dashed #ccc;
            padding: 20px;
            text-align: center;
            cursor: pointer;
            background: #f9f9f9;
            border-radius: 5px;
            transition: border-color 0.3s;
        }

        .drag-drop-area.dragover {
            border-color: #007bff;
            background: #e9ecef;
        }

        .drag-drop-area p {
            margin: 0;
            color: #666;
        }

        .preview-thumbnail {
            position: relative;
            width: 100px;
            height: 100px;
            margin-right: 10px;
            margin-bottom: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            overflow: hidden;
            display: inline-block;
        }

        .preview-thumbnail img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .delete-preview {
            position: absolute;
            top: 5px;
            right: 5px;
            background: rgba(255, 0, 0, 0.7);
            color: white;
            width: 20px;
            height: 20px;
            line-height: 20px;
            text-align: center;
            border-radius: 50%;
            cursor: pointer;
            font-size: 14px;
        }

        .crop-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }

        .crop-modal-content {
            background: white;
            padding: 20px;
            border-radius: 5px;
            max-width: 90%;
            max-height: 90%;
            overflow: auto;
            position: relative;
        }

        .crop-image-container {
            max-width: 100%;
            max-height: 500px;
            margin-bottom: 20px;
        }

        .crop-modal-buttons {
            text-align: right;
        }

        .crop-modal-buttons button {
            margin-left: 10px;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .crop-modal-buttons .cancel-btn {
            background: #ccc;
        }

        .crop-modal-buttons .crop-btn {
            background: #28a745;
            color: white;
        }
    </style>
</head>

<body>
    <%- include('../partials/admin/header.ejs') %>
        <%- include('../partials/admin/sidebar.ejs') %>

            <div class="content">
                <h2 class="text-center mb-4">Add New Product</h2>

                <form id="addProductForm" enctype="multipart/form-data">
                    <div class="mb-3">
                        <label class="form-label">Product Name</label>
                        <input type="text" name="productName" class="form-control" required>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Full Description</label>
                        <textarea name="description" class="form-control" rows="3" required></textarea>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Category</label>
                            <select name="category" class="form-select" required>
                                <option value="">Select Category</option>
                                <% categories.forEach(category=> { %>
                                    <option value="<%= category._id %>">
                                        <%= category.name %>
                                    </option>
                                    <% }); %>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Brand</label>
                            <select name="brand" class="form-select" required>
                                <option value="">Select Brand</option>
                                <% brands.forEach(brand=> { %>
                                    <option value="<%= brand._id %>">
                                        <%= brand.brandName %>
                                    </option>
                                    <% }); %>
                            </select>
                        </div>
                    </div>

                    <!-- Product Variants Section -->
                    <div class="mb-3">
                        <label class="form-label">Product Variants</label>
                        <div id="variantsContainer">
                            <div class="variant-group mb-3" data-index="0">
                                <div class="row">
                                    <div class="col-md-3">
                                        <label class="form-label">Color Name</label>
                                        <input type="text" name="variantName" class="form-control" required>
                                    </div>
                                    <div class="col-md-2">
                                        <label class="form-label">Color</label>
                                        <input type="color" name="variantColor" class="form-control" required>
                                    </div>
                                    <div class="col-md-2">
                                        <label class="form-label">Original Price</label>
                                        <input type="number" name="variantPrice" class="form-control" required>
                                    </div>
                                    <div class="col-md-2">
                                        <label class="form-label">Sale Price</label>
                                        <input type="number" name="variantSalePrice" class="form-control" required>
                                    </div>
                                    <div class="col-md-2">
                                        <label class="form-label">Stock</label>
                                        <input type="number" name="variantStock" class="form-control" required>
                                    </div>
                                    <div class="col-md-12">
                                        <label class="form-label">Product Images (1-5)</label>
                                        <div class="drag-drop-area" data-variant-index="0">
                                            <p>Drag & Drop Images Here or Click to Select (Max 5)</p>
                                            <input type="file" name="variantImages[0]"
                                                class="variant-image-input d-none" multiple accept="image/*">
                                        </div>
                                        <div class="image-preview mt-2" data-variant-index="0"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <button type="button" class="btn btn-info mt-2" onclick="addVariant()">+ Add Variant</button>
                    </div>

                    <button type="submit" class="btn btn-success w-100">Add Product</button>
                </form>
            </div>

            <!-- Crop Modal -->
            <div class="crop-modal" id="cropModal">
                <div class="crop-modal-content">
                    <div class="crop-image-container">
                        <img id="cropImage" src="" alt="Image to crop">
                    </div>
                    <div class="crop-modal-buttons">
                        <button class="cancel-btn" id="cancelCrop">Cancel</button>
                        <button class="crop-btn" id="cropImageBtn">Crop & Save</button>
                    </div>
                </div>
            </div>

            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
            <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
            <script>
                let variantCount = 1;
                let cropper;
                let currentVariantIndex;
                let currentFile;
                let fileQueue = [];
                let currentFileIndex = 0;
                const croppedBlobs = { 0: [] }; // Store blobs instead of File objects

                function addVariant() {
                    variantCount++;
                    const variantGroup = document.createElement('div');
                    variantGroup.className = 'variant-group mb-3';
                    variantGroup.setAttribute('data-index', variantCount - 1);
                    variantGroup.innerHTML = `
        <div class="row">
            <div class="col-md-3">
                <label class="form-label">Color Name</label>
                <input type="text" name="variantName" class="form-control" required>
            </div>
            <div class="col-md-2">
                <label class="form-label">Color</label>
                <input type="color" name="variantColor" class="form-control" required>
            </div>
            <div class="col-md-2">
                <label class="form-label">Original Price</label>
                <input type="number" name="variantPrice" class="form-control" required>
            </div>
            <div class="col-md-2">
                <label class="form-label">Sale Price</label>
                <input type="number" name="variantSalePrice" class="form-control" required>
            </div>
            <div class="col-md-2">
                <label class="form-label">Stock</label>
                <input type="number" name="variantStock" class="form-control" required>
            </div>
            <div class="col-md-12">
                <label class="form-label">Product Images (1-5) <span class="text-danger">*</span></label>
                <div class="drag-drop-area" data-variant-index="${variantCount - 1}">
                    <p>Drag & Drop Images Here or Click to Select (Max 5)</p>
                    <input type="file" name="variantImages[${variantCount - 1}]" class="variant-image-input d-none" multiple accept="image/*">
                </div>
                <div class="image-preview mt-2" data-variant-index="${variantCount - 1}"></div>
            </div>
        </div>
    `;
                    document.getElementById('variantsContainer').appendChild(variantGroup);
                    croppedBlobs[variantCount - 1] = [];
                    attachDragDropListeners();
                }

                function attachDragDropListeners() {
                    document.querySelectorAll('.drag-drop-area').forEach(area => {
                        const input = area.querySelector('.variant-image-input');
                        area.removeEventListener('click', handleClick);
                        area.removeEventListener('dragover', handleDragOver);
                        area.removeEventListener('dragleave', handleDragLeave);
                        area.removeEventListener('drop', handleDrop);
                        input.removeEventListener('change', handleInputChange);

                        area.addEventListener('click', handleClick);
                        area.addEventListener('dragover', handleDragOver);
                        area.addEventListener('dragleave', handleDragLeave);
                        area.addEventListener('drop', handleDrop);
                        input.addEventListener('change', handleInputChange);

                        function handleClick() {
                            input.click();
                        }

                        function handleDragOver(e) {
                            e.preventDefault();
                            area.classList.add('dragover');
                        }

                        function handleDragLeave() {
                            area.classList.remove('dragover');
                        }

                        function handleDrop(e) {
                            e.preventDefault();
                            area.classList.remove('dragover');
                            const files = e.dataTransfer.files;
                            input.files = files;
                            handleFiles(files, area.dataset.variantIndex);
                        }

                        function handleInputChange(e) {
                            handleFiles(e.target.files, area.dataset.variantIndex);
                        }
                    });
                }

                function handleFiles(files, variantIndex) {
                    if (files.length === 0) return;

                    const totalImages = (croppedBlobs[variantIndex] ? croppedBlobs[variantIndex].length : 0) + files.length;
                    if (totalImages > 5) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Limit Exceeded',
                            text: `You can only upload up to 5 images per variant (Variant ${parseInt(variantIndex) + 1}).`
                        });
                        return;
                    }

                    currentVariantIndex = variantIndex;
                    fileQueue = Array.from(files);
                    currentFileIndex = 0;
                    processNextFile();
                }

                function processNextFile() {
                    if (currentFileIndex >= fileQueue.length) {
                        fileQueue = [];
                        currentFileIndex = 0;
                        return;
                    }

                    currentFile = fileQueue[currentFileIndex];
                    const reader = new FileReader();
                    reader.onload = function (event) {
                        const cropImage = document.getElementById('cropImage');
                        cropImage.src = event.target.result;
                        document.getElementById('cropModal').style.display = 'flex';

                        if (cropper) {
                            cropper.destroy();
                        }

                        cropper = new Cropper(cropImage, {
                            aspectRatio: 1,
                            viewMode: 1,
                            autoCropArea: 0.8,
                            movable: true,
                            zoomable: true,
                            scalable: true,
                        });
                    };
                    reader.readAsDataURL(currentFile);
                }

                document.getElementById('cancelCrop').addEventListener('click', () => {
                    document.getElementById('cropModal').style.display = 'none';
                    if (cropper) {
                        cropper.destroy();
                    }
                    currentFile = null;
                    fileQueue = [];
                    currentFileIndex = 0;
                });

                document.getElementById('cropImageBtn').addEventListener('click', () => {
                    if (cropper) {
                        cropper.getCroppedCanvas().toBlob((blob) => {
                            // Store the blob and metadata
                            const blobEntry = {
                                blob: blob,
                                name: currentFile.name,
                                type: currentFile.type,
                                url: URL.createObjectURL(blob) // For preview
                            };
                            croppedBlobs[currentVariantIndex].push(blobEntry);

                            const previewContainer = document.querySelector(`.image-preview[data-variant-index="${currentVariantIndex}"]`);
                            const preview = document.createElement('div');
                            preview.className = 'preview-thumbnail';
                            preview.innerHTML = `
                <img src="${blobEntry.url}" alt="Preview">
                <span class="delete-preview" data-index="${croppedBlobs[currentVariantIndex].length - 1}">×</span>
            `;
                            previewContainer.appendChild(preview);

                            preview.querySelector('.delete-preview').addEventListener('click', (e) => {
                                const index = e.target.dataset.index;
                                const removedBlob = croppedBlobs[currentVariantIndex][index];
                                URL.revokeObjectURL(removedBlob.url); // Clean up URL
                                croppedBlobs[currentVariantIndex].splice(index, 1);
                                preview.remove();
                                updatePreviewIndices(previewContainer, currentVariantIndex);
                            });

                            document.getElementById('cropModal').style.display = 'none';
                            cropper.destroy();
                            currentFile = null;

                            currentFileIndex++;
                            processNextFile();
                        }, currentFile.type);
                    }
                });

                function updatePreviewIndices(container, variantIndex) {
                    const previews = container.querySelectorAll('.preview-thumbnail');
                    previews.forEach((preview, index) => {
                        preview.querySelector('.delete-preview').dataset.index = index;
                    });
                }

                document.getElementById('addProductForm').addEventListener('submit', (e) => {
                    e.preventDefault();

                    // Client-side validation: Check if each variant has at least one image
                    const variantGroups = document.querySelectorAll('.variant-group');
                    for (let i = 0; i < variantGroups.length; i++) {
                        const variantIndex = variantGroups[i].dataset.index;
                        const images = croppedBlobs[variantIndex] || [];
                        if (images.length === 0) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Missing Images',
                                text: `At least one image is required for each variant (Variant ${parseInt(variantIndex) + 1})`
                            });
                            return;
                        }
                    }

                    const formData = new FormData(e.target);

                    console.log('📂 croppedBlobs before submission:', croppedBlobs);
                    Object.keys(croppedBlobs).forEach(variantIndex => {
                        formData.delete(`variantImages[${variantIndex}]`);
                        croppedBlobs[variantIndex].forEach(blobEntry => {
                            const file = new File([blobEntry.blob], blobEntry.name, { type: blobEntry.type });
                            console.log(`Appending file for variant ${variantIndex}:`, file);
                            formData.append(`variantImages[${variantIndex}]`, file);
                        });
                    });

                    // Log FormData contents
                    for (let [key, value] of formData.entries()) {
                        console.log(`FormData Entry - ${key}:`, value);
                    }

                    fetch('/admin/products/add', {
                        method: 'POST',
                        body: formData
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            return response.json();
                        })
                        .then(data => {
                            if (data.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Success',
                                    text: 'Product added successfully!',
                                    timer: 1500,
                                    showConfirmButton: false
                                }).then(() => {
                                    window.location.href = '/admin/products';
                                });
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: data.message || 'Failed to add product'
                                });
                            }
                        })
                        .catch(error => {
                            console.error('Fetch Error:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Failed to add product due to a server error. Please check the server logs for more details.'
                            });
                        });
                });

                attachDragDropListeners();
            </script>
</body>

</html>