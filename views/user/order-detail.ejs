<!-- views/user/order-detail.ejs -->

<!DOCTYPE html>
<html lang="en">

<head>
    <title>Order Details | ChronoCraft</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/order-detail.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link
        href="https://fonts.googleapis.com/css2?family=Cormorant+Garamond:wght@400;500;600;700&family=Montserrat:wght@300;400;500;600&display=swap"
        rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>

<body>
    <%- include('../partials/user/header.ejs') %>

        <div class="container mt-5 pt-5">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title">Order #<%= order.orderNumber %>
                    </h2>
                    <p class="card-text"><small>Ordered on <%= new Date(order.createdAt).toLocaleDateString('en-IN') %>
                                </small></p>
                    <div class="order-status mb-3">
                        <span class="status-tag <%= order.orderStatus.toLowerCase() %>">
                            <%= order.orderStatus %>
                        </span>
                    </div>

                    <div class="row g-3 mb-4">
                        <div class="col-md-4">
                            <div class="card p-3">
                                <p><strong>Order Status</strong></p>
                                <p>
                                    <%= order.orderStatus %>
                                </p>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card p-3">
                                <p><strong>Payment Method</strong></p>
                                <p>
                                    <%= order.payment.method %>
                                </p>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card p-3">
                                <p><strong>Payment Status</strong></p>
                                <p>
                                    <%= order.payment.status %>
                                </p>
                            </div>
                        </div>
                    </div>

                    <div class="card mb-4">
                        <div class="card-body">
                            <h5>Products Ordered</h5>
                            <% order.items.forEach(item=> { %>
                                <div class="d-flex align-items-center mb-3">
                                    <img src="<%= item.product.variants[item.variantIndex].productImages[0] %>"
                                        alt="<%= item.product.productName %>" class="order-product-image me-3">
                                    <div class="flex-grow-1">
                                        <h6>
                                            <%= item.product.productName %>
                                        </h6>
                                        <p class="text-muted">Color: <%=
                                                item.product.variants[item.variantIndex].colorName %> | Qty: <%=
                                                    item.quantity %>
                                        </p>
                                        <p class="fw-bold">₹<%= (item.price * item.quantity).toLocaleString('en-IN') %>
                                        </p>
                                        <% if (item.status.itemStatus==='Cancelled' ) { %>
                                            <span class="text-danger">Item cancelled</span>
                                            <% } else if (order.orderStatus==='Processing' ) { %>
                                                <button class="btn btn-danger btn-sm"
                                                    onclick="confirmCancelItem('<%= order._id %>', '<%= item._id %>')">Cancel
                                                    Item</button>
                                                <% } %>
                                                    <% if (order.orderStatus==='Delivered' &&
                                                        !item.status.return.requested) { %>
                                                        <button class="btn btn-warning btn-sm"
                                                            onclick="confirmReturnItem('<%= order._id %>', '<%= item._id %>')">Return
                                                            Item</button>
                                                        <% } %>
                                    </div>
                                </div>
                                <% }); %>
                        </div>
                    </div>

                    <div class="card mb-4">
                        <div class="card-body">
                            <h5>Shipping Information</h5>
                            <p>
                                <%= order.shippingAddress.street %>, <%= order.shippingAddress.city %>,
                                        <%= order.shippingAddress.state %> - <%= order.shippingAddress.pincode %>
                            </p>
                        </div>
                    </div>

                    <div class="card mb-4">
                        <div class="card-body">
                            <h5>Price Details</h5>
                            <p>Subtotal: ₹<%= order.pricing ? order.pricing.subtotal.toLocaleString('en-IN') : '0' %>
                            </p>
                            <p>GST (12%): ₹<%= order.pricing ? (order.pricing.subtotal * 0.12).toLocaleString('en-IN')
                                    : '0' %>
                            </p>
                            <p>Shipping: ₹<%= order.pricing ? order.pricing.shippingFee.toLocaleString('en-IN') : '0' %>
                            </p>
                            <% if (order.pricing && order.pricing.discount && order.pricing.discount> 0) { %>
                                <p>Discount: -₹<%= order.pricing.discount.toLocaleString('en-IN') %>
                                </p>
                                <% } %>
                                    <p><strong>Total</strong>: ₹<%= order.pricing ?
                                            order.pricing.finalAmount.toLocaleString('en-IN') : '0' %>
                                    </p>
                        </div>
                    </div>

                    <div class="d-flex justify-content-between">
                        <a href="/user/orders" class="btn btn-secondary">Back to Orders</a>
                        <% if (order.orderStatus==='Processing' && order.items.some(item=> item.status.itemStatus !==
                            'Cancelled')) { %>
                            <button class="btn btn-danger" onclick="confirmCancelOrder('<%= order._id %>')">Cancel
                                Order</button>
                            <% } %>
                                <% if (order.orderStatus==='Delivered' ) { %>
                                    <button class="btn btn-warning"
                                        onclick="confirmReturnOrder('<%= order._id %>')">Return Order</button>
                                    <% } %>
                                        <% if (order.payment.status==='Completed' ) { %>
                                            <a href="/user/order/<%= order._id %>/download-invoice"
                                                class="btn btn-outline-dark">Download Invoice</a>
                                            <% } %>
                    </div>
                </div>
            </div>
        </div>

        <%- include('../partials/user/footer.ejs') %>

            <script>
                function confirmCancelOrder(orderId) {
                    Swal.fire({
                        title: 'Are you sure?',
                        text: 'Do you want to cancel this order?',
                        input: 'text',
                        inputPlaceholder: 'Reason (optional)',
                        inputAttributes: { maxlength: 200 },
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Yes, cancel it!'
                    }).then(async (result) => {
                        if (result.isConfirmed) {
                            try {
                                const response = await fetch(`/user/order/${orderId}/cancel`, {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ reason: result.value || '' })
                                });
                                const data = await response.json();
                                if (data.success) {
                                    Swal.fire({
                                        toast: true,
                                        position: 'top-end',
                                        icon: 'success',
                                        title: data.message,
                                        showConfirmButton: false,
                                        timer: 1500
                                    });
                                    setTimeout(() => {
                                        window.location.href = data.redirectUrl || '/user/orders';
                                    }, 2000);
                                } else {
                                    Swal.fire({
                                        toast: true,
                                        position: 'top-end',
                                        icon: 'error',
                                        title: data.message,
                                        showConfirmButton: false,
                                        timer: 2000
                                    });
                                }
                            } catch (error) {
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'error',
                                    title: 'Server error. Please try again.',
                                    showConfirmButton: false,
                                    timer: 2000
                                });
                            }
                        }
                    });
                }

                function confirmCancelItem(orderId, itemId) {
                    Swal.fire({
                        title: 'Are you sure?',
                        text: 'Do you want to cancel this item?',
                        input: 'text',
                        inputPlaceholder: 'Reason (optional)',
                        inputAttributes: { maxlength: 200 },
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Yes, cancel it!'
                    }).then(async (result) => {
                        if (result.isConfirmed) {
                            try {
                                const response = await fetch(`/user/order/${orderId}/cancel-item/${itemId}`, {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ reason: result.value || '' })
                                });
                                const data = await response.json();
                                if (data.success) {
                                    Swal.fire({
                                        toast: true,
                                        position: 'top-end',
                                        icon: 'success',
                                        title: data.message,
                                        showConfirmButton: false,
                                        timer: 1500
                                    });
                                    setTimeout(() => {
                                        if (data.redirectUrl) {
                                            window.location.href = data.redirectUrl;
                                        } else {
                                            location.reload();
                                        }
                                    }, 2000);
                                } else {
                                    Swal.fire({
                                        toast: true,
                                        position: 'top-end',
                                        icon: 'error',
                                        title: data.message,
                                        showConfirmButton: false,
                                        timer: 2000
                                    });
                                }
                            } catch (error) {
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'error',
                                    title: 'Server error. Please try again.',
                                    showConfirmButton: false,
                                    timer: 2000
                                });
                            }
                        }
                    });
                }

                function confirmReturnOrder(orderId) {
                    Swal.fire({
                        title: 'Request Return',
                        text: 'Please provide a reason for returning this order.',
                        input: 'text',
                        inputPlaceholder: 'Reason (required)',
                        inputAttributes: { maxlength: 200, required: true },
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Submit Return Request',
                        preConfirm: (reason) => {
                            if (!reason) {
                                Swal.showValidationMessage('Reason is required');
                            }
                            return reason;
                        }
                    }).then(async (result) => {
                        if (result.isConfirmed) {
                            try {
                                const response = await fetch(`/user/order/${orderId}/return`, {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ reason: result.value })
                                });
                                const data = await response.json();
                                if (data.success) {
                                    Swal.fire({
                                        toast: true,
                                        position: 'top-end',
                                        icon: 'success',
                                        title: data.message,
                                        showConfirmButton: false,
                                        timer: 1500
                                    });
                                    setTimeout(() => location.reload(), 2000);
                                } else {
                                    Swal.fire({
                                        toast: true,
                                        position: 'top-end',
                                        icon: 'error',
                                        title: data.message,
                                        showConfirmButton: false,
                                        timer: 2000
                                    });
                                }
                            } catch (error) {
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'error',
                                    title: 'Server error. Please try again.',
                                    showConfirmButton: false,
                                    timer: 2000
                                });
                            }
                        }
                    });
                }

                function confirmReturnItem(orderId, itemId) {
                    Swal.fire({
                        title: 'Request Return',
                        text: 'Please provide a reason for returning this item.',
                        input: 'text',
                        inputPlaceholder: 'Reason (required)',
                        inputAttributes: { maxlength: 200, required: true },
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Submit Return Request',
                        preConfirm: (reason) => {
                            if (!reason) {
                                Swal.showValidationMessage('Reason is required');
                            }
                            return reason;
                        }
                    }).then(async (result) => {
                        if (result.isConfirmed) {
                            try {
                                const response = await fetch(`/user/order/${orderId}/return-item/${itemId}`, {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ reason: result.value })
                                });
                                const data = await response.json();
                                if (data.success) {
                                    Swal.fire({
                                        toast: true,
                                        position: 'top-end',
                                        icon: 'success',
                                        title: data.message,
                                        showConfirmButton: false,
                                        timer: 1500
                                    });
                                    setTimeout(() => location.reload(), 2000);
                                } else {
                                    Swal.fire({
                                        toast: true,
                                        position: 'top-end',
                                        icon: 'error',
                                        title: data.message,
                                        showConfirmButton: false,
                                        timer: 2000
                                    });
                                }
                            } catch (error) {
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'error',
                                    title: 'Server error. Please try again.',
                                    showConfirmButton: false,
                                    timer: 2000
                                });
                            }
                        }
                    });
                }
            </script>
</body>

</html>