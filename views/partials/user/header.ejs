<link rel="stylesheet" href="/css/header-footer.css">

<!-- âœ… Navigation -->
<nav class="navbar navbar-expand-lg fixed-top">
    <div class="container-fluid">
        <!-- ðŸ”¹ Hamburger Toggle for Mobile -->
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <!-- ðŸ”¹ Center Logo -->
        <a class="navbar-brand mx-auto logo-center" href="/">
            <img src="/images/Chronocraft-logo-transp-copy.png" alt="CHRONOCRAFT" height="33">
        </a>

        <!-- ðŸ”¹ Collapsible Content -->
        <div class="collapse navbar-collapse" id="navbarContent">
            <!-- ðŸ”¹ Left Menu -->
            <div class="navbar-nav me-auto">
                <a class="nav-link" href="/user/men">MEN</a>
                <a class="nav-link" href="/user/women">WOMEN</a>
                <a class="nav-link" href="/user/shop">SHOP</a>
            </div>

            <!-- ðŸ”¹ Right Menu -->
            <div class="navbar-nav ms-auto">
                <!-- ðŸ”¹ Profile Hover Dropdown -->
                <div class="nav-item dropdown profile-dropdown">
                    <a class="nav-link d-flex align-items-center" href="#" id="profileDropdown">
                        <% if (user) { %>
                            <span class="user-name me-2">
                                <%= user.name %>
                            </span>
                        <% } %>
                        <i class="fas fa-user profile-icon"></i>
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end" id="profileMenu">
                        <% if (user) { %>
                            <!-- ðŸ”¹ Logged-in User -->
                            <li><a class="dropdown-item" href="/user/profile">Profile</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item logout-btn" href="/user/logout">Logout</a></li>
                        <% } else { %>
                            <!-- ðŸ”¹ Guest User -->
                            <li><a class="dropdown-item" href="/user/login">Login</a></li>
                            <li><a class="dropdown-item" href="/user/signup">Sign Up</a></li>
                        <% } %>
                    </ul>
                </div>
                <a class="nav-link position-relative" href="/user/wishlist">
                    <i class="fas fa-heart"></i>
                    <span class="badge bg-danger rounded-pill wishlist-count"
                        style="display: <%= locals.wishlistCount && wishlistCount > 0 ? 'inline-block' : 'none' %>;">
                        <%= locals.wishlistCount || 0 %>
                    </span>
                </a>
                <a class="nav-link position-relative" href="/user/cart">
                    <i class="fas fa-shopping-bag"></i>
                    <span class="badge bg-danger rounded-pill cart-count"
                        style="display: <%= locals.cartCount && cartCount > 0 ? 'inline-block' : 'none' %>;">
                        <%= locals.cartCount || 0 %>
                    </span>
                </a>
            </div>
        </div>
    </div>
</nav>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Navbar Scroll Effect
        function handleNavbarScroll() {
            const navbar = document.querySelector('.navbar');
            if (window.scrollY > 50) {
                navbar.classList.add('navbar-scrolled');
            } else {
                navbar.classList.remove('navbar-scrolled');
            }
        }
        window.addEventListener('scroll', handleNavbarScroll);

        // Profile Dropdown Behavior (Improved for stability)
        const profileDropdown = document.querySelector('.profile-dropdown');
        const dropdownMenu = profileDropdown?.querySelector('.dropdown-menu');

        if (profileDropdown && dropdownMenu) {
            let isOpen = false;
            let timeoutId;

            const showDropdown = () => {
                clearTimeout(timeoutId);
                dropdownMenu.style.display = 'block';
                dropdownMenu.style.opacity = '1';
                dropdownMenu.style.visibility = 'visible';
                dropdownMenu.classList.add('show');
                isOpen = true;
            };

            const hideDropdown = () => {
                timeoutId = setTimeout(() => {
                    dropdownMenu.style.opacity = '0';
                    dropdownMenu.style.visibility = 'hidden';
                    dropdownMenu.classList.remove('show');
                    setTimeout(() => {
                        if (!isOpen) dropdownMenu.style.display = 'none';
                    }, 300); // Match CSS transition duration
                }, 200);
            };

            // Desktop: Hover behavior
            profileDropdown.addEventListener('mouseenter', showDropdown);
            profileDropdown.addEventListener('mouseleave', () => {
                isOpen = false;
                hideDropdown();
            });
            dropdownMenu.addEventListener('mouseenter', () => {
                clearTimeout(timeoutId);
                isOpen = true;
            });
            dropdownMenu.addEventListener('mouseleave', () => {
                isOpen = false;
                hideDropdown();
            });

            // Mobile: Click behavior
            profileDropdown.addEventListener('click', (e) => {
                if (window.innerWidth < 992) {
                    e.preventDefault();
                    if (isOpen) {
                        hideDropdown();
                    } else {
                        showDropdown();
                    }
                }
            });

            // Close dropdown on click outside
            document.addEventListener('click', (e) => {
                if (!profileDropdown.contains(e.target) && isOpen) {
                    hideDropdown();
                    isOpen = false;
                }
            });
        }

        // Redirect Non-Logged Users to Login on Protected Links
        const authLinks = document.querySelectorAll('a[href="/user/wishlist"], a[href="/user/cart"]');
        authLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                <% if (!user) { %>
                    e.preventDefault();
                    window.location.href = '/user/login';
                <% } %>
            });
        });

        // Logout Button Handler
        const logoutBtn = document.querySelector(".logout-btn");
        if (logoutBtn) {
            logoutBtn.addEventListener("click", function (event) {
                event.preventDefault();
                fetch("/user/logout")
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            window.location.href = data.redirectUrl;
                        }
                    })
                    .catch(error => console.error("Logout failed:", error));
            });
        }

        // Function to update cart and wishlist counts dynamically
        async function updateHeaderCounts() {
            try {
                const response = await fetch('/user/counts', {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });
                const data = await response.json();
                if (data.success) {
                    // Update cart count
                    const cartBadge = document.querySelector('.cart-count');
                    if (cartBadge) {
                        cartBadge.textContent = data.cartCount;
                        cartBadge.style.display = data.cartCount > 0 ? 'inline-block' : 'none';
                    }

                    // Update wishlist count
                    const wishlistBadge = document.querySelector('.wishlist-count');
                    if (wishlistBadge) {
                        wishlistBadge.textContent = data.wishlistCount;
                        wishlistBadge.style.display = data.wishlistCount > 0 ? 'inline-block' : 'none';
                    }
                }
            } catch (error) {
                console.error('[HEADER] Error updating counts:', error);
            }
        }

        // Initial update of counts on page load
        updateHeaderCounts();

        // Listen for custom events to update counts dynamically
        document.addEventListener('cartUpdated', updateHeaderCounts);
        document.addEventListener('wishlistUpdated', updateHeaderCounts);
    });
</script>