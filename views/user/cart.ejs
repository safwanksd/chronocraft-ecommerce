<!-- views/user/cart.ejs -->

<!DOCTYPE html>
<html lang="en">

<head>
    <title>Shopping Cart | ChronoCraft</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/cart.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link
        href="https://fonts.googleapis.com/css2?family=Cormorant+Garamond:wght@400;500;600;700&family=Montserrat:wght@300;400;500;600&display=swap"
        rel="stylesheet">
</head>

<body>
    <%- include('../partials/user/header.ejs') %>

        <div class="container mt-4">
            <h2 class="mb-4">Shopping Cart</h2>
            <% if (!cart || cart.items.length===0) { %>
                <p class="text-muted">Your cart is empty.</p>
                <a href="/user/shop" class="btn btn-outline-dark mt-3">Continue Shopping</a>
                <% } else { %>
                    <div class="row">
                        <div class="col-md-8">
                            <div id="cart-items">
                                <% cart.items.forEach(item=> { %>
                                    <div class="card mb-3" data-item-id="<%= item._id %>">
                                        <div class="card-body d-flex align-items-center">
                                            <img src="<%= item.product.variants[item.variantIndex].productImages[0] %>"
                                                alt="<%= item.product.productName %>" class="cart-product-image me-3">
                                            <div class="flex-grow-1">
                                                <h5>
                                                    <%= item.product.productName %>
                                                </h5>
                                                <p class="text-muted">
                                                    Color: <%= item.product.variants[item.variantIndex].colorName %> |
                                                        Category: <%= item.product.category ? item.product.category.name
                                                            : 'Uncategorized' %>
                                                </p>
                                                <p>
                                                    <% if (item.effectiveDiscount> 0) { %>
                                                        <span class="text-muted text-decoration-line-through">₹<%=
                                                                item.originalPrice.toLocaleString('en-IN') %></span>
                                                        <span class="fw-bold text-success ms-2">₹<%=
                                                                item.salePrice.toLocaleString('en-IN') %></span>
                                                        <span class="text-success">(<%= item.effectiveDiscount %>%
                                                                OFF)</span>
                                                        <% } else { %>
                                                            <span class="fw-bold">₹<%=
                                                                    item.salePrice.toLocaleString('en-IN') %></span>
                                                            <% } %>
                                                </p>
                                                <p class="fw-bold" id="itemPrice_<%= item._id %>">
                                                    Total: ₹<%= (item.salePrice * item.quantity).toLocaleString('en-IN')
                                                        %>
                                                </p>
                                            </div>
                                            <div class="d-flex align-items-center gap-2">
                                                <button class="btn btn-outline-secondary"
                                                    onclick="updateQuantity('<%= item._id %>', 'decrement')">-</button>
                                                <span class="quantity" id="quantity_<%= item._id %>">
                                                    <%= item.quantity %>
                                                </span>
                                                <button class="btn btn-outline-secondary"
                                                    onclick="updateQuantity('<%= item._id %>', 'increment')">+</button>
                                                <button class="btn btn-danger ms-2"
                                                    onclick="confirmRemoveFromCart('<%= item._id %>')">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    <% }); %>
                            </div>
                            <% if (hasMore) { %>
                                <button id="load-more" class="btn btn-outline-dark mt-3"
                                    data-page="<%= currentPage %>">Load More</button>
                                <% } %>
                                    <br>

                        </div>
                        <div class="col-md-4">
                            <div class="card">
                                <div class="card-body">
                                    <h5>Order Summary</h5>
                                    <p id="totalAmount">Total Amount: ₹<%= cart.totalAmount.toLocaleString('en-IN') %>
                                    </p>
                                    <button class="btn btn-orange w-100 mt-3" onclick="proceedToCheckout()"
                                        <%=cart.items.length===0 ? 'disabled' : '' %>>Proceed to Checkout</button>
                                    <a href="/user/shop" class="btn btn-outline-dark w-100 mt-2">Continue Shopping</a>
                                </div>
                            </div>
                        </div>
                    </div>
                    <% } %>
        </div>



  
            <script>
                async function updateQuantity(itemId, action) {
                    try {
                        const response = await fetch(`/user/cart/update/${itemId}`, {
                            method: 'PATCH',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ action })
                        });

                        const data = await response.json();
                        if (data.success) {
                            const quantitySpan = document.getElementById(`quantity_${itemId}`);
                            const itemPrice = document.getElementById(`itemPrice_${itemId}`);
                            quantitySpan.textContent = data.newQuantity;

                            // Update item price based on new quantity and pricePerUnit from response
                            const pricePerUnit = data.pricePerUnit;
                            itemPrice.textContent = `Total: ₹${(pricePerUnit * data.newQuantity).toLocaleString('en-IN')}`;

                            // Update total amount
                            const totalAmount = document.getElementById('totalAmount');
                            totalAmount.textContent = `Total Amount: ₹${data.newTotal.toLocaleString('en-IN')}`;

                            Swal.fire({
                                toast: true,
                                position: 'top-end',
                                icon: 'success',
                                title: 'Cart updated',
                                showConfirmButton: false,
                                timer: 1500
                            });
                        } else {
                            Swal.fire({
                                toast: true,
                                position: 'top-end',
                                icon: 'error',
                                title: data.message || 'Failed to update cart',
                                showConfirmButton: false,
                                timer: 2000
                            });
                        }
                    } catch (error) {
                        console.error('[CART] Error updating quantity:', error);
                    }
                }

                function confirmRemoveFromCart(itemId) {
                    Swal.fire({
                        title: 'Are you sure?',
                        text: 'Are you sure you want to remove this from cart?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Yes, remove it!'
                    }).then(async (result) => {
                        if (result.isConfirmed) {
                            try {
                                const response = await fetch(`/user/cart/remove/${itemId}`, {
                                    method: 'DELETE'
                                });

                                const data = await response.json();
                                if (data.success) {
                                    document.querySelector(`[onclick="confirmRemoveFromCart('${itemId}')"]`).closest('.card').remove();

                                    // Update total amount dynamically
                                    const totalAmount = document.getElementById('totalAmount');
                                    totalAmount.textContent = `Total Amount: ₹${data.newTotal.toLocaleString('en-IN')}`;

                                    // Check if cart is empty and disable checkout button
                                    const proceedBtn = document.querySelector('.btn-orange');
                                    if (document.querySelectorAll('.card.mb-3').length === 0) {
                                        const container = document.querySelector('.row');
                                        container.innerHTML = `
                            <p class="text-muted">Your cart is empty.</p>
                            <a href="/user/shop" class="btn btn-outline-dark mt-3">Continue Shopping</a>
                        `;
                                        proceedBtn.disabled = true;
                                    }

                                    Swal.fire({
                                        toast: true,
                                        position: 'top-end',
                                        icon: 'success',
                                        title: 'Product removed successfully',
                                        showConfirmButton: false,
                                        timer: 1500
                                    });

                                    // Dispatch custom event to update header counts
                                    document.dispatchEvent(new Event('cartUpdated'));
                                }
                            } catch (error) {
                                console.error('[CART] Error removing item:', error);
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'error',
                                    title: 'Failed to remove item',
                                    showConfirmButton: false,
                                    timer: 2000
                                });
                            }
                        }
                    });
                }

                function proceedToCheckout() {
                    if (document.querySelector('.btn-orange').disabled) return;
                    window.location.href = '/user/checkout';
                }

                // Add Load More functionality
                document.getElementById('load-more')?.addEventListener('click', async function () {
                    const currentPage = parseInt(this.getAttribute('data-page'));
                    const nextPage = currentPage + 1;

                    try {
                        const response = await fetch(`/user/cart?page=${nextPage}&limit=5`, {
                            headers: { 'X-Requested-With': 'XMLHttpRequest' }
                        });
                        const data = await response.json();

                        if (data.success) {
                            const cartItemsContainer = document.getElementById('cart-items');
                            data.cart.items.forEach(item => {
                                const itemHtml = `
                            <div class="card mb-3" data-item-id="${item._id}">
                                <div class="card-body d-flex align-items-center">
                                    <img src="${item.product.variants[item.variantIndex].productImages[0]}" 
                                         alt="${item.product.productName}" 
                                         class="cart-product-image me-3">
                                    <div class="flex-grow-1">
                                        <h5>${item.product.productName}</h5>
                                        <p class="text-muted">
                                            Color: ${item.product.variants[item.variantIndex].colorName} | 
                                            Category: ${item.product.category ? item.product.category.name : 'Uncategorized'}
                                        </p>
                                        <p>
                                            ${item.effectiveDiscount > 0 ?
                                        `<span class="text-muted text-decoration-line-through">₹${item.originalPrice.toLocaleString('en-IN')}</span>
                                                 <span class="fw-bold text-success ms-2">₹${item.salePrice.toLocaleString('en-IN')}</span>
                                                 <span class="text-success">(${item.effectiveDiscount}% OFF)</span>` :
                                        `<span class="fw-bold">₹${item.salePrice.toLocaleString('en-IN')}</span>`}
                                        </p>
                                        <p class="fw-bold" id="itemPrice_${item._id}">
                                            Total: ₹${(item.salePrice * item.quantity).toLocaleString('en-IN')}
                                        </p>
                                    </div>
                                    <div class="d-flex align-items-center gap-2">
                                        <button class="btn btn-outline-secondary" 
                                                onclick="updateQuantity('${item._id}', 'decrement')">-</button>
                                        <span class="quantity" id="quantity_${item._id}">${item.quantity}</span>
                                        <button class="btn btn-outline-secondary" 
                                                onclick="updateQuantity('${item._id}', 'increment')">+</button>
                                        <button class="btn btn-danger ms-2" 
                                                onclick="confirmRemoveFromCart('${item._id}')">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        `;
                                cartItemsContainer.insertAdjacentHTML('beforeend', itemHtml);
                            });

                            // Update the button's page attribute or remove it if no more items
                            if (data.hasMore) {
                                this.setAttribute('data-page', data.currentPage);
                            } else {
                                this.remove();
                            }
                        } else {
                            Swal.fire({
                                toast: true,
                                position: 'top-end',
                                icon: 'error',
                                title: data.message || 'Failed to load more items',
                                showConfirmButton: false,
                                timer: 2000
                            });
                        }
                    } catch (error) {
                        console.error('[CART] Error loading more items:', error);
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: 'Error loading more items',
                            showConfirmButton: false,
                            timer: 2000
                        });
                    }
                });


                document.addEventListener('DOMContentLoaded', () => {
                    const urlParams = new URLSearchParams(window.location.search);
                    const unavailableItemsParam = urlParams.get('unavailableItems');

                    if (unavailableItemsParam) {
                        try {
                            const unavailableItems = JSON.parse(decodeURIComponent(unavailableItemsParam));
                            if (unavailableItems && unavailableItems.length > 0) {
                                const message = `The following items are unavailable: ${unavailableItems.map(item => `${item.productName} (${item.colorName}): ${item.reason}`).join(', ')}. Please update your cart.`;
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Unavailable Items',
                                    text: message,
                                    showConfirmButton: true,
                                    confirmButtonText: 'Update Cart'
                                }).then(() => {
                                    // Clear the query parameter from the URL
                                    window.history.replaceState({}, document.title, '/user/cart');
                                });
                            }
                        } catch (error) {
                            console.error('[CART] Error parsing unavailableItems:', error);
                        }
                    }
                });
            </script>
</body>

</html>