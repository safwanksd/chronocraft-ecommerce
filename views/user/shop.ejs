<!-- views/user/shop.ejs -->

<!DOCTYPE html>
<html lang="en">

<head>
    <title>Shop | CHRONOCRAFT The Watch Store</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/shop.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link
        href="https://fonts.googleapis.com/css2?family=Cormorant+Garamond:wght@400;500;600;700&family=Montserrat:wght@300;400;500;600&display=swap"
        rel="stylesheet">
</head>

<body>
    <%- include('../partials/user/header') %>

        <div class="container mt-5 py-5">
            <h2 class="text-center mb-5 text-black text-shadow">Discover Our Exquisite Watch Collections</h2>
            <div class="row">
                <div class="col-12">
                    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4 g-4" id="productContainer">
                        <% if (products.length> 0) { %>
                            <% products.forEach(product=> { %>
                                <div class="col mb-4">
                                    <div class="card product-card h-100">
                                        <div class="wishlist-button">
                                            <button class="btn btn-wishlist"
                                                onclick="toggleWishlist('<%= product._id %>', this)"
                                                data-product-id="<%= product._id %>">
                                                <i class="far fa-heart"></i>
                                            </button>
                                        </div>
                                        <img src="<%= product.variants[0].productImages[0] %>" class="card-img-top"
                                            alt="<%= product.productName %>">
                                        <div class="card-body d-flex flex-column">
                                            <h5 class="card-title text-black text-shadow">
                                                <%= product.productName %>
                                            </h5>
                                            <p class="card-text text-gray mb-2">
                                                <%= product.brand.brandName %> | <%= product.category.name %>
                                            </p>
                                            <p class="card-text mb-3">
                                                <strong class="text-dark">‚Çπ<%=
                                                        product.variants[0].displaySalePrice.toLocaleString('en-IN') %>
                                                        </strong>
                                                <% if (product.variants[0].displaySalePrice < product.variants[0].price)
                                                    { %>
                                                    <span class="original-price text-muted ms-2"><s>‚Çπ<%=
                                                                product.variants[0].price.toLocaleString('en-IN') %>
                                                                </s></span>
                                                    <% } %>
                                                        <% if (product.variants[0].offerDiscount> 0) { %>
                                                            <span class="offer-badge">
                                                                <%= product.variants[0].offerDiscount %>% OFF
                                                            </span>
                                                            <% } %>
                                            </p>
                                            <a href="/user/product-detail/<%= product._id %>"
                                                class="btn btn-black mt-auto">View Details</a>
                                        </div>
                                    </div>
                                </div>
                                <% }); %>
                                    <% } else { %>
                                        <div class="col-12 text-center">
                                            <p class="text-black text-shadow">No Products Found</p>
                                        </div>
                                        <% } %>
                    </div>

                    <!-- Pagination -->
                    <% if (totalPages> 1) { %>
                        <nav aria-label="Page navigation" class="mt-4">
                            <ul class="pagination justify-content-center">
                                <% for (let i=1; i <=totalPages; i++) { %>
                                    <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                                        <a class="page-link"
                                            href="?page=<%= i %>&search=<%= currentFilters.search %>&sort=<%= currentFilters.sort %>&category=<%= currentFilters.category %>&brand=<%= currentFilters.brand %>">
                                            <%= i %>
                                        </a>
                                    </li>
                                    <% } %>
                            </ul>
                        </nav>
                        <% } %>
                </div>
            </div>
        </div>

        <div id="filterPanel" class="filter-panel">
            <div class="filter-section p-3">
                <button class="filter-toggle btn btn-modern w-100 mb-3" onclick="toggleFilters()">
                    <i class="fas fa-filter"></i> Refine Selection
                </button>
                <div id="filterOptions" class="filter-options">
                    <input type="text" id="searchInput" class="form-control mb-3" placeholder="Search Watches...">
                    <button class="btn btn-black w-100 mb-3" onclick="clearSearch()">Clear Search</button>
                    <label for="sortOptions" class="form-label text-black mb-2">Sort By</label>
                    <select id="sortOptions" class="form-select mb-3">
                        <option value="low-high">Price: Low to High</option>
                        <option value="high-low">Price: High to Low</option>
                        <option value="name-asc">Name: A-Z</option>
                        <option value="name-desc">Name: Z-A</option>
                    </select>
                    <label for="categoryFilter" class="form-label text-black mb-2">Category</label>
                    <select id="categoryFilter" class="form-select mb-3">
                        <option value="">All Categories</option>
                        <% categories.forEach(category=> { %>
                            <option value="<%= category._id %>">
                                <%= category.name %>
                            </option>
                            <% }); %>
                    </select>
                    <label for="brandFilter" class="form-label text-black mb-2">Brand</label>
                    <select id="brandFilter" class="form-select mb-3">
                        <option value="">All Brands</option>
                        <% brands.forEach(brand=> { %>
                            <option value="<%= brand._id %>">
                                <%= brand.brandName %>
                            </option>
                            <% }); %>
                    </select>
                </div>
            </div>
        </div>

        <%- include('../partials/user/footer.ejs') %>

            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

            <script>
                document.addEventListener("DOMContentLoaded", function () {
                    console.log("üü¢ Shop Page Loaded!");

                    const searchInput = document.getElementById("searchInput");
                    const sortOptions = document.getElementById("sortOptions");
                    const categoryFilter = document.getElementById("categoryFilter");
                    const brandFilter = document.getElementById("brandFilter");
                    const productContainer = document.getElementById("productContainer");
                    const filterPanel = document.getElementById("filterPanel");

                    let wishlistItems = []; // Store wishlist items to check icon state

                    filterPanel.classList.add('open');
                    filterPanel.style.display = 'block';

                    // Fetch wishlist on page load to update icon states
                    async function fetchWishlist() {
                        try {
                            const response = await fetch('/user/wishlist', {
                                headers: {
                                    'X-Requested-With': 'XMLHttpRequest'
                                }
                            });

                            if (response.status === 401) {
                                wishlistItems = [];
                                return;
                            }

                            const data = await response.json();
                            wishlistItems = data.wishlist || [];
                            updateWishlistIcons();
                        } catch (error) {
                            console.error("‚ùå Error fetching wishlist:", error);
                            wishlistItems = [];
                        }
                    }

                    // Update wishlist icons based on current wishlist items
                    function updateWishlistIcons() {
                        document.querySelectorAll('.btn-wishlist').forEach(button => {
                            const productId = button.getAttribute('data-product-id');
                            console.log(`Checking productId for button: ${productId}`); // Debug log
                            const isWishlisted = wishlistItems.some(item => item.product._id.toString() === productId);
                            const icon = button.querySelector('i');
                            if (isWishlisted) {
                                icon.classList.remove('far');
                                icon.classList.add('fas');
                                button.classList.add('wishlisted');
                            } else {
                                icon.classList.remove('fas');
                                icon.classList.add('far');
                                button.classList.remove('wishlisted');
                            }
                        });
                    }

                    // Toggle wishlist (add or remove)
                    window.toggleWishlist = async function (productId, button) {
                        console.log(`Toggling wishlist for productId: ${productId}`); // Debug log
                        const icon = button.querySelector('i');
                        const isWishlisted = icon.classList.contains('fas');

                        if (isWishlisted) {
                            // Remove from wishlist
                            const wishlistItem = wishlistItems.find(item => item.product._id.toString() === productId);
                            if (!wishlistItem) return;

                            try {
                                const response = await fetch(`/user/wishlist/remove/${wishlistItem._id}`, {
                                    method: 'DELETE',
                                    headers: {
                                        'Content-Type': 'application/json',
                                        'X-Requested-With': 'XMLHttpRequest'
                                    }
                                });

                                const data = await response.json();
                                if (data.success) {
                                    Swal.fire({
                                        toast: true,
                                        position: 'top-end',
                                        icon: 'success',
                                        title: 'Removed from Wishlist',
                                        text: data.message,
                                        showConfirmButton: false,
                                        timer: 2000
                                    });
                                    icon.classList.remove('fas');
                                    icon.classList.add('far');
                                    button.classList.remove('wishlisted');
                                    wishlistItems = wishlistItems.filter(item => item._id !== wishlistItem._id);

                                    // Dispatch custom event to update header counts
                                    document.dispatchEvent(new Event('wishlistUpdated'));
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Oops...',
                                        text: data.message
                                    });
                                }
                            } catch (error) {
                                console.error("‚ùå Error removing from wishlist:", error);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: 'An error occurred. Please try again.'
                                });
                            }
                        } else {
                            // Add to wishlist
                            if (!productId) {
                                console.error("Product ID is null or undefined"); // Debug log
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Oops...',
                                    text: "Product ID is missing. Please try again."
                                });
                                return;
                            }

                            try {
                                const response = await fetch('/user/wishlist/add', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                        'X-Requested-With': 'XMLHttpRequest'
                                    },
                                    body: JSON.stringify({ productId, variantIndex: 0 }) // Default to first variant
                                });

                                const data = await response.json();
                                if (data.success) {
                                    Swal.fire({
                                        toast: true,
                                        position: 'top-end',
                                        icon: 'success',
                                        title: 'Added to Wishlist',
                                        text: data.message,
                                        showConfirmButton: false,
                                        timer: 2000
                                    });
                                    icon.classList.remove('far');
                                    icon.classList.add('fas');
                                    button.classList.add('wishlisted');
                                    wishlistItems.push({ _id: data.data.wishlistId, product: { _id: productId } });

                                    // Dispatch custom event to update header counts
                                    document.dispatchEvent(new Event('wishlistUpdated'));
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Oops...',
                                        text: data.message
                                    });
                                }
                            } catch (error) {
                                console.error("‚ùå Error adding to wishlist:", error);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: 'An error occurred. Please try again.'
                                });
                            }
                        }
                    };

                    function debounce(func, wait) {
                        let timeout;
                        return function executedFunction(...args) {
                            const later = () => {
                                clearTimeout(timeout);
                                func(...args);
                            };
                            clearTimeout(timeout);
                            timeout = setTimeout(later, wait);
                        };
                    }

                    searchInput.addEventListener("input", debounce(() => fetchProducts(), 300));
                    sortOptions.addEventListener("change", fetchProducts);
                    categoryFilter.addEventListener("change", fetchProducts);
                    brandFilter.addEventListener("change", fetchProducts);

                    window.clearSearch = function () {
                        searchInput.value = "";
                        fetchProducts();
                    };

                    window.toggleFilters = function () {
                        const filterOptions = document.getElementById("filterOptions");
                        if (filterOptions.style.display === "none") {
                            filterOptions.style.display = "block";
                            filterPanel.classList.add('open');
                        } else {
                            filterOptions.style.display = "none";
                            filterPanel.classList.remove('open');
                        }
                    };

                    async function fetchProducts(page = <%= currentPage %>) {
                    try {
                        productContainer.classList.add('loading');

                        const search = searchInput.value.trim();
                        const sort = sortOptions.value;
                        const category = categoryFilter.value;
                        const brand = brandFilter.value;

                        const query = new URLSearchParams({
                            search,
                            sort,
                            category,
                            brand,
                            page
                        }).toString();

                        console.log(`üöÄ Fetching Products with Query: ${query}`);

                        const response = await fetch(`/user/shop?${query}`, {
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        });

                        if (!response.ok) {
                            const result = await response.json();
                            if (response.status === 403 && result.message) {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Blocked!',
                                    text: result.message,
                                    confirmButtonText: 'OK'
                                }).then(() => {
                                    window.location.href = result.redirect;
                                });
                                return;
                            }
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }

                        const html = await response.text();
                        productContainer.innerHTML = html;
                        console.log("üü¢ Products Updated Successfully!");

                        // Reattach event listeners to new wishlist buttons
                        document.querySelectorAll('.btn-wishlist').forEach(button => {
                            const productId = button.getAttribute('data-product-id');
                            console.log(`Reattaching to button with productId: ${productId}`); // Debug log
                            button.onclick = () => toggleWishlist(productId, button);
                        });

                        // Update wishlist icons after fetching products
                        updateWishlistIcons();

                        // Update URL without reloading
                        window.history.pushState({}, '', `/user/shop?${query}`);
                    } catch (error) {
                        console.error("‚ùå Error fetching products:", error);
                        productContainer.innerHTML = `
                        <div class="col-12 text-center">
                            <p class="text-black text-shadow">Error Loading Products. Please Try Again</p>
                        </div>
                    `;
                    } finally {
                        productContainer.classList.remove('loading');
                    }
                }

                // Handle pagination clicks
                document.querySelectorAll('.page-link').forEach(link => {
                    link.addEventListener('click', function (e) {
                        e.preventDefault();
                        const page = this.getAttribute('href').split('page=')[1].split('&')[0];
                        fetchProducts(page);
                    });
                });

                // Fetch wishlist and products on initial load
                fetchWishlist();
                fetchProducts();
        });
            </script>
</body>

</html>