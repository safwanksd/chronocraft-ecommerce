<!-- views/user/orders.ejs -->
<!DOCTYPE html>
<html lang="en">

<head>
    <title>Order Details | ChronoCraft</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/order-detail.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link
        href="https://fonts.googleapis.com/css2?family=Cormorant+Garamond:wght@400;500;600;700&family=Montserrat:wght@300;400;500;600&display=swap"
        rel="stylesheet">
</head>

<body>
    <%- include('../partials/user/header.ejs') %>

        <div class="container mt-5 pt-5">
            <h2 class="mb-4">My Orders</h2>
            <div class="input-group mb-3">
                <input type="text" id="searchOrders" class="form-control"
                    placeholder="Search by order number or product name..." aria-label="Search orders"
                    aria-describedby="searchButton">
                <button class="btn btn-navy" type="button" id="searchButton" onclick="searchOrders()">Search</button>
                <button class="btn btn-secondary" type="button" id="resetSearch">Reset</button>
            </div>

            <div id="orderList">
                <% if (orders.length===0) { %>
                    <p class="text-muted">No orders found.</p>
                    <% } else { %>
                        <% orders.forEach(order=> { %>
                            <div class="card mb-3">
                                <div class="card-body">
                                    <h5 class="card-title">Order #<%= order.orderNumber %>
                                    </h5>
                                    <p class="card-text"><strong>Order Status:</strong>
                                        <% if (order.orderStatus==='Return Requested' ) { %>
                                            Return Requested (Pending Admin Approval)
                                            <% } else { %>
                                                <%= order.orderStatus %>
                                                    <% } %>
                                    </p>
                                    <p class="card-text"><strong>Order Date:</strong>
                                        <%= new Date(order.createdAt).toLocaleDateString('en-IN') %>
                                    </p>
                                    <p class="card-text"><strong>Product:</strong>
                                        <%= order.items[0]?.product?.productName || 'No product' %>
                                    </p>
                                    <p class="card-text"><strong>Payment Status:</strong>
                                        <% if (order.payment.status==='Failed' ) { %>
                                            <span class="text-danger">
                                                <%= order.payment.status %>
                                            </span>
                                            <% } else { %>
                                                <%= order.payment.status %>
                                                    <% } %>
                                    </p>
                                    <div class="d-flex justify-content-between">
                                        <a href="/user/order/<%= order._id %>" class="btn btn-navy">View Details</a>
                                        <% if (order.payment.status==='Failed' ) { %>
                                            <button class="btn btn-warning"
                                                onclick="retryPayment('<%= order._id %>', <%= order.pricing.finalAmount %>)">Retry
                                                Payment</button>
                                            <% } else { %>
                                                <% if (order.orderStatus==='Processing' ) { %>
                                                    <button class="btn btn-outline-danger"
                                                        onclick="confirmCancelOrder('<%= order._id %>')">Cancel
                                                        Order</button>
                                                    <% } %>
                                                        <% if (order.orderStatus==='Delivered' ) { %>
                                                            <button class="btn btn-outline-warning"
                                                                onclick="confirmReturnOrder('<%= order._id %>')">Return
                                                                Order</button>
                                                            <% } %>
                                                                <% if (order.payment.status==='Completed' ) { %>
                                                                    <a href="/user/order/<%= order._id %>/download-invoice"
                                                                        class="btn btn-outline-dark">Download
                                                                        Invoice</a>
                                                                    <% } %>
                                                                        <% } %>
                                    </div>
                                </div>
                            </div>
                            <% }); %>
                                <% } %>
            </div>

            <% if (totalPages> 1) { %>
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center">
                        <!-- Pagination will be rendered by JavaScript -->
                    </ul>
                </nav>
                <% } %>
        </div>

        <%- include('../partials/user/footer.ejs') %>

        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

            <script>
                async function retryPayment(orderId, amount) {
                    try {
                        const response = await fetch(`/user/checkout/initiate-payment`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                orderId: orderId,
                                amount: amount
                            }),
                        });
                        const paymentData = await response.json();

                        if (paymentData.success) {
                            const options = {
                                key: '<%= razorpayKeyId %>',
                                amount: paymentData.order.amount,
                                currency: 'INR',
                                name: 'ChronoCraft',
                                description: `Retry Payment for Order #${orderId}`,
                                order_id: paymentData.order.id,
                                handler: async function (response) {
                                    const verifyResponse = await fetch('/user/checkout/verify-payment', {
                                        method: 'POST',
                                        headers: { 'Content-Type': 'application/json' },
                                        body: JSON.stringify({
                                            razorpay_order_id: response.razorpay_order_id,
                                            razorpay_payment_id: response.razorpay_payment_id,
                                            razorpay_signature: response.razorpay_signature,
                                            orderId: orderId,
                                        }),
                                    });
                                    const verifyData = await verifyResponse.json();

                                    if (verifyData.success) {
                                        window.location.href = `/user/order-success/${orderId}`;
                                    } else {
                                        window.location.href = `/user/order-failure/${orderId}`;
                                    }
                                },
                                theme: {
                                    color: '#F37254',
                                },
                                modal: {
                                    ondismiss: async function () {
                                        await fetch('/user/checkout/verify-payment', {
                                            method: 'POST',
                                            headers: { 'Content-Type': 'application/json' },
                                            body: JSON.stringify({
                                                razorpay_order_id: paymentData.order.id,
                                                razorpay_payment_id: null,
                                                razorpay_signature: null,
                                                orderId: orderId,
                                            }),
                                        });
                                        window.location.href = `/user/order-failure/${orderId}`;
                                    },
                                },
                            };

                            const rzp = new Razorpay(options);
                            rzp.on('payment.failed', async function (response) {
                                await fetch('/user/checkout/verify-payment', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({
                                        razorpay_order_id: paymentData.order.id,
                                        razorpay_payment_id: response.error.metadata.payment_id,
                                        razorpay_signature: null,
                                        orderId: orderId,
                                    }),
                                });
                                window.location.href = `/user/order-failure/${orderId}`;
                            });
                            rzp.open();
                        } else {
                            Swal.fire({
                                toast: true,
                                position: 'top-end',
                                icon: 'error',
                                title: 'Failed to initiate payment retry',
                                showConfirmButton: false,
                                timer: 2000
                            });
                        }
                    } catch (error) {
                        console.error('Retry payment error:', error);
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: 'Server error. Please try again.',
                            showConfirmButton: false,
                            timer: 2000
                        });
                    }
                }

                async function searchOrders() {
                    const query = document.getElementById('searchOrders').value;
                    try {
                        const response = await fetch(`/user/orders?search=${encodeURIComponent(query)}`, {
                            method: 'GET',
                            headers: {
                                'Content-Type': 'application/json',
                                'Accept': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        });
                        const data = await response.json();
                        if (data.success) {
                            const orderList = document.getElementById('orderList');
                            if (data.orders.length === 0) {
                                orderList.innerHTML = '<p class="text-muted">No orders found for the given search term.</p>';
                            } else {
                                orderList.innerHTML = data.orders.map(order => `
                            <div class="card mb-3">
                                <div class="card-body">
                                    <h5 class="card-title">Order #${order.orderNumber}</h5>
                                    <p class="card-text"><strong>Order Status:</strong> 
                                        ${order.orderStatus === 'Return Requested' ? 'Return Requested (Pending Admin Approval)' : order.orderStatus}
                                    </p>
                                    <p class="card-text"><strong>Order Date:</strong> ${new Date(order.createdAt).toLocaleDateString('en-IN')}</p>
                                    <p class="card-text"><strong>Product:</strong> ${order.items[0]?.product?.productName || 'No product'}</p>
                                    <p class="card-text"><strong>Payment Status:</strong> 
                                        ${order.payment.status === 'Failed' ? '<span class="text-danger">' + order.payment.status + '</span>' : order.payment.status}
                                    </p>
                                    <div class="d-flex justify-content-between">
                                        <a href="/user/order/${order._id}" class="btn btn-navy">View Details</a>
                                        ${order.payment.status === 'Failed' ?
                                        `<button class="btn btn-warning" onclick="retryPayment('${order._id}', ${order.pricing.finalAmount})">Retry Payment</button>` :
                                        (order.orderStatus === 'Processing' ? `<button class="btn btn-outline-danger" onclick="confirmCancelOrder('${order._id}')">Cancel Order</button>` : '') +
                                        (order.orderStatus === 'Delivered' ? `<button class="btn btn-outline-warning" onclick="confirmReturnOrder('${order._id}')">Return Order</button>` : '') +
                                        (order.payment.status === 'Completed' ? `<a href="/user/order/${order._id}/download-invoice" class="btn btn-outline-dark">Download Invoice</a>` : '')
                                    }
                                    </div>
                                </div>
                            </div>
                        `).join('');
                            }
                            renderPagination(data.currentPage, data.totalPages, query);
                        } else {
                            Swal.fire({
                                toast: true,
                                position: 'top-end',
                                icon: 'error',
                                title: data.message || 'Failed to search orders',
                                showConfirmButton: false,
                                timer: 2000
                            });
                        }
                    } catch (error) {
                        console.error('Search error - Details:', error.message, error.stack);
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: 'Server error. Please try again.',
                            showConfirmButton: false,
                            timer: 2000
                        });
                    }
                }

                document.getElementById('resetSearch').addEventListener('click', () => {
                    const searchInput = document.getElementById('searchOrders');
                    searchInput.value = '';
                    searchOrders().then(() => {
                        const orderList = document.getElementById('orderList');
                        if (orderList) {
                            orderList.innerHTML = '';
                            fetch('/user/orders', {
                                method: 'GET',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Accept': 'application/json',
                                    'X-Requested-With': 'XMLHttpRequest'
                                }
                            })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        if (data.orders.length === 0) {
                                            orderList.innerHTML = '<p class="text-muted">No orders found.</p>';
                                        } else {
                                            orderList.innerHTML = data.orders.map(order => `
                                    <div class="card mb-3">
                                        <div class="card-body">
                                            <h5 class="card-title">Order #${order.orderNumber}</h5>
                                            <p class="card-text"><strong>Order Status:</strong> 
                                                ${order.orderStatus === 'Return Requested' ? 'Return Requested (Pending Admin Approval)' : order.orderStatus}
                                            </p>
                                            <p class="card-text"><strong>Order Date:</strong> ${new Date(order.createdAt).toLocaleDateString('en-IN')}</p>
                                            <p class="card-text"><strong>Product:</strong> ${order.items[0]?.product?.productName || 'No product'}</p>
                                            <p class="card-text"><strong>Payment Status:</strong> 
                                                ${order.payment.status === 'Failed' ? '<span class="text-danger">' + order.payment.status + '</span>' : order.payment.status}
                                            </p>
                                            <div class="d-flex justify-content-between">
                                                <a href="/user/order/${order._id}" class="btn btn-navy">View Details</a>
                                                ${order.payment.status === 'Failed' ?
                                                    `<button class="btn btn-warning" onclick="retryPayment('${order._id}', ${order.pricing.finalAmount})">Retry Payment</button>` :
                                                    (order.orderStatus === 'Processing' ? `<button class="btn btn-outline-danger" onclick="confirmCancelOrder('${order._id}')">Cancel Order</button>` : '') +
                                                    (order.orderStatus === 'Delivered' ? `<button class="btn btn-outline-warning" onclick="confirmReturnOrder('${order._id}')">Return Order</button>` : '') +
                                                    (order.payment.status === 'Completed' ? `<a href="/user/order/${order._id}/download-invoice" class="btn btn-outline-dark">Download Invoice</a>` : '')
                                                }
                                            </div>
                                        </div>
                                    </div>
                                `).join('');
                                        }
                                        renderPagination(data.currentPage || 1, data.totalPages, '');
                                    } else {
                                        Swal.fire({
                                            toast: true,
                                            position: 'top-end',
                                            icon: 'error',
                                            title: data.message || 'Failed to reset orders',
                                            showConfirmButton: false,
                                            timer: 2000
                                        });
                                    }
                                })
                                .catch(error => {
                                    console.error('Reset error - Details:', error.message, error.stack);
                                    Swal.fire({
                                        toast: true,
                                        position: 'top-end',
                                        icon: 'error',
                                        title: 'Server error. Please try again.',
                                        showConfirmButton: false,
                                        timer: 2000
                                    });
                                });
                        }
                    });
                });

                function confirmCancelOrder(orderId) {
                    Swal.fire({
                        title: 'Are you sure?',
                        text: 'Do you want to cancel this order?',
                        input: 'text',
                        inputPlaceholder: 'Reason (optional)',
                        inputAttributes: { maxlength: 200 },
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Yes, cancel it!'
                    }).then(async (result) => {
                        if (result.isConfirmed) {
                            try {
                                const response = await fetch(`/user/order/${orderId}/cancel`, {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ reason: result.value || '' })
                                });
                                const data = await response.json();
                                if (data.success) {
                                    Swal.fire({
                                        toast: true,
                                        position: 'top-end',
                                        icon: 'success',
                                        title: data.message,
                                        showConfirmButton: false,
                                        timer: 1500
                                    });
                                    setTimeout(() => location.reload(), 2000);
                                } else {
                                    Swal.fire({
                                        toast: true,
                                        position: 'top-end',
                                        icon: 'error',
                                        title: data.message,
                                        showConfirmButton: false,
                                        timer: 2000
                                    });
                                }
                            } catch (error) {
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'error',
                                    title: 'Server error. Please try again.',
                                    showConfirmButton: false,
                                    timer: 2000
                                });
                            }
                        }
                    });
                }

                function confirmReturnOrder(orderId) {
                    Swal.fire({
                        title: 'Request Return',
                        text: 'Please provide a reason for returning this order.',
                        input: 'text',
                        inputPlaceholder: 'Reason (required)',
                        inputAttributes: { maxlength: 200, required: true },
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Submit Return Request',
                        preConfirm: (reason) => {
                            if (!reason) {
                                Swal.showValidationMessage('Reason is required');
                            }
                            return reason;
                        }
                    }).then(async (result) => {
                        if (result.isConfirmed) {
                            try {
                                const response = await fetch(`/user/order/${orderId}/return`, {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ reason: result.value })
                                });
                                const data = await response.json();
                                if (data.success) {
                                    Swal.fire({
                                        toast: true,
                                        position: 'top-end',
                                        icon: 'success',
                                        title: data.message,
                                        showConfirmButton: false,
                                        timer: 1500
                                    });
                                    setTimeout(() => location.reload(), 2000);
                                } else {
                                    Swal.fire({
                                        toast: true,
                                        position: 'top-end',
                                        icon: 'error',
                                        title: data.message,
                                        showConfirmButton: false,
                                        timer: 2000
                                    });
                                }
                            } catch (error) {
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'error',
                                    title: 'Server error. Please try again.',
                                    showConfirmButton: false,
                                    timer: 2000
                                });
                            }
                        }
                    });
                }

                async function loadPage(page) {
                    const search = document.getElementById('searchOrders').value;
                    try {
                        const response = await fetch(`/user/orders?page=${page}&search=${encodeURIComponent(search)}`, {
                            method: 'GET',
                            headers: {
                                'Content-Type': 'application/json',
                                'Accept': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        });
                        const data = await response.json();
                        if (data.success) {
                            const orderList = document.getElementById('orderList');
                            if (data.orders.length === 0) {
                                orderList.innerHTML = '<p class="text-muted">No orders found for the given search term.</p>';
                            } else {
                                orderList.innerHTML = data.orders.map(order => `
                            <div class="card mb-3">
                                <div class="card-body">
                                    <h5 class="card-title">Order #${order.orderNumber}</h5>
                                    <p class="card-text"><strong>Order Status:</strong> 
                                        ${order.orderStatus === 'Return Requested' ? 'Return Requested (Pending Admin Approval)' : order.orderStatus}
                                    </p>
                                    <p class="card-text"><strong>Order Date:</strong> ${new Date(order.createdAt).toLocaleDateString('en-IN')}</p>
                                    <p class="card-text"><strong>Product:</strong> ${order.items[0]?.product?.productName || 'No product'}</p>
                                    <p class="card-text"><strong>Payment Status:</strong> 
                                        ${order.payment.status === 'Failed' ? '<span class="text-danger">' + order.payment.status + '</span>' : order.payment.status}
                                    </p>
                                    <div class="d-flex justify-content-between">
                                        <a href="/user/order/${order._id}" class="btn btn-navy">View Details</a>
                                        ${order.payment.status === 'Failed' ?
                                        `<button class="btn btn-warning" onclick="retryPayment('${order._id}', ${order.pricing.finalAmount})">Retry Payment</button>` :
                                        (order.orderStatus === 'Processing' ? `<button class="btn btn-outline-danger" onclick="confirmCancelOrder('${order._id}')">Cancel Order</button>` : '') +
                                        (order.orderStatus === 'Delivered' ? `<button class="btn btn-outline-warning" onclick="confirmReturnOrder('${order._id}')">Return Order</button>` : '') +
                                        (order.payment.status === 'Completed' ? `<a href="/user/order/${order._id}/download-invoice" class="btn btn-outline-dark">Download Invoice</a>` : '')
                                    }
                                    </div>
                                </div>
                            </div>
                        `).join('');
                            }
                            renderPagination(data.currentPage, data.totalPages, search);
                        } else {
                            Swal.fire({
                                toast: true,
                                position: 'top-end',
                                icon: 'error',
                                title: data.message || 'Failed to load page',
                                showConfirmButton: false,
                                timer: 2000
                            });
                        }
                    } catch (error) {
                        console.error('Page load error - Details:', error.message, error.stack);
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: 'Server error. Please try again.',
                            showConfirmButton: false,
                            timer: 2000
                        });
                    }
                }

                function renderPagination(currentPage, totalPages, search) {
                    const pagination = document.querySelector('.pagination');
                    if (!pagination) return;

                    pagination.innerHTML = '';
                    const prevLi = document.createElement('li');
                    prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
                    prevLi.innerHTML = `<a class="page-link" href="?page=${currentPage - 1}&search=${encodeURIComponent(search || '')}" onclick="loadPage(${currentPage - 1}); return false;">Previous</a>`;
                    pagination.appendChild(prevLi);

                    for (let i = 1; i <= totalPages; i++) {
                        const li = document.createElement('li');
                        li.className = `page-item ${currentPage === i ? 'active' : ''}`;
                        li.innerHTML = `<a class="page-link" href="?page=${i}&search=${encodeURIComponent(search || '')}" onclick="loadPage(${i}); return false;">${i}</a>`;
                        pagination.appendChild(li);
                    }

                    const nextLi = document.createElement('li');
                    nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
                    nextLi.innerHTML = `<a class="page-link" href="?page=${currentPage + 1}&search=${encodeURIComponent(search || '')}" onclick="loadPage(${currentPage + 1}); return false;">Next</a>`;
                    pagination.appendChild(nextLi);
                }

                document.addEventListener('DOMContentLoaded', () => {
                    if ('<%= totalPages %>' > 1) {
                        renderPagination('<%= currentPage %>', '<%= totalPages %>', '<%= search || '' %>');
                    }
                });
            </script>
</body>

</html>